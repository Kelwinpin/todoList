name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./frontend/.next
          retention-days: 1

  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: todotest
        options: >-
          --health-cmd "pg_isready -U test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/todotest
        run: |
          npx prisma generate
          npx prisma db push

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/todotest
          JWT_SECRET: test-secret-key
        run: npm run test

      - name: Run e2e tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/todotest
          JWT_SECRET: test-secret-key
        run: npm run test:e2e

      - name: Generate test coverage
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/todotest
          JWT_SECRET: test-secret-key
        run: npm run test:cov

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
        continue-on-error: true

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: ./backend/dist
          retention-days: 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [frontend, backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Audit Frontend Dependencies
        working-directory: ./frontend
        run: |
          npm ci
          npm audit --audit-level moderate

      - name: Audit Backend Dependencies
        working-directory: ./backend
        run: |
          npm ci
          npm audit --audit-level moderate

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [frontend, backend, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./frontend/.next

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./backend/dist

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "Frontend build ready: $(ls -la ./frontend/.next)"
          echo "Backend build ready: $(ls -la ./backend/dist)"
          # Add your deployment commands here
          # Example: scp, rsync, docker push, etc.

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [frontend, backend, security-scan]
    if: always()

    steps:
      - name: Notify on success
        if: ${{ needs.frontend.result == 'success' && needs.backend.result == 'success' && needs.security-scan.result == 'success' }}
        run: |
          echo "‚úÖ All checks passed successfully!"
          echo "Frontend: ${{ needs.frontend.result }}"
          echo "Backend: ${{ needs.backend.result }}"
          echo "Security: ${{ needs.security-scan.result }}"

      - name: Notify on failure
        if: ${{ needs.frontend.result == 'failure' || needs.backend.result == 'failure' || needs.security-scan.result == 'failure' }}
        run: |
          echo "‚ùå Some checks failed!"
          echo "Frontend: ${{ needs.frontend.result }}"
          echo "Backend: ${{ needs.backend.result }}"
          echo "Security: ${{ needs.security-scan.result }}"
          exit 1